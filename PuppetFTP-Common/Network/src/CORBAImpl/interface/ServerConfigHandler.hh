// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __ServerConfigHandler_hh__
#define __ServerConfigHandler_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_ServerConfigHandler
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_ServerConfigHandler
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_ServerConfigHandler
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





#ifndef __ServerConfigHandler__
#define __ServerConfigHandler__

class ServerConfigHandler;
class _objref_ServerConfigHandler;
class _impl_ServerConfigHandler;

typedef _objref_ServerConfigHandler* ServerConfigHandler_ptr;
typedef ServerConfigHandler_ptr ServerConfigHandlerRef;

class ServerConfigHandler_Helper {
public:
  typedef ServerConfigHandler_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_ServerConfigHandler, ServerConfigHandler_Helper> ServerConfigHandler_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_ServerConfigHandler,ServerConfigHandler_Helper > ServerConfigHandler_out;

#endif

// interface ServerConfigHandler
class ServerConfigHandler {
public:
  // Declarations for this interface type.
  typedef ServerConfigHandler_ptr _ptr_type;
  typedef ServerConfigHandler_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(::CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
  
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  enum INTERNET_PROTOCOL { IPv4, IPv6, undefined /*, __max_INTERNET_PROTOCOL=0xffffffff */ };
  typedef INTERNET_PROTOCOL& INTERNET_PROTOCOL_out;

  enum VIRTUAL_USER_AUTHENTICATION { Anonymous /*, __max_VIRTUAL_USER_AUTHENTICATION=0xffffffff */ };
  typedef VIRTUAL_USER_AUTHENTICATION& VIRTUAL_USER_AUTHENTICATION_out;

  class ConfigurationException : public ::CORBA::UserException {
  public:
    
    ::CORBA::String_member why;

  

    inline ConfigurationException() {
      pd_insertToAnyFn    = insertToAnyFn;
      pd_insertToAnyFnNCP = insertToAnyFnNCP;
    }
    ConfigurationException(const ConfigurationException&);
    ConfigurationException(const char* i_why);
    ConfigurationException& operator=(const ConfigurationException&);
    virtual ~ConfigurationException();
    virtual void _raise() const;
    static ConfigurationException* _downcast(::CORBA::Exception*);
    static const ConfigurationException* _downcast(const ::CORBA::Exception*);
    static inline ConfigurationException* _narrow(::CORBA::Exception* _e) {
      return _downcast(_e);
    }
    
    void operator>>=(cdrStream&) const ;
    void operator<<=(cdrStream&) ;

    static _core_attr insertExceptionToAny    insertToAnyFn;
    static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

    virtual ::CORBA::Exception* _NP_duplicate() const;

    static _core_attr const char* _PD_repoId;
    static _core_attr const char* _PD_typeId;

  private:
    virtual const char* _NP_typeId() const;
    virtual const char* _NP_repoId(int*) const;
    virtual void _NP_marshal(cdrStream&) const;
  };

  class ServerException : public ::CORBA::UserException {
  public:
    
    ::CORBA::String_member why;

  

    inline ServerException() {
      pd_insertToAnyFn    = insertToAnyFn;
      pd_insertToAnyFnNCP = insertToAnyFnNCP;
    }
    ServerException(const ServerException&);
    ServerException(const char* i_why);
    ServerException& operator=(const ServerException&);
    virtual ~ServerException();
    virtual void _raise() const;
    static ServerException* _downcast(::CORBA::Exception*);
    static const ServerException* _downcast(const ::CORBA::Exception*);
    static inline ServerException* _narrow(::CORBA::Exception* _e) {
      return _downcast(_e);
    }
    
    void operator>>=(cdrStream&) const ;
    void operator<<=(cdrStream&) ;

    static _core_attr insertExceptionToAny    insertToAnyFn;
    static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

    virtual ::CORBA::Exception* _NP_duplicate() const;

    static _core_attr const char* _PD_repoId;
    static _core_attr const char* _PD_typeId;

  private:
    virtual const char* _NP_typeId() const;
    virtual const char* _NP_repoId(int*) const;
    virtual void _NP_marshal(cdrStream&) const;
  };

  class StringSequence_var;

  class StringSequence : public _CORBA_Unbounded_Sequence_String {
  public:
    typedef StringSequence_var _var_type;
    inline StringSequence() {}
    inline StringSequence(const StringSequence& _s)
      : _CORBA_Unbounded_Sequence_String(_s) {}

    inline StringSequence(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_String(_max) {}
    inline StringSequence(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

  

    inline StringSequence& operator = (const StringSequence& _s) {
      _CORBA_Unbounded_Sequence_String::operator=(_s);
      return *this;
    }
  };

  class StringSequence_out;

  class StringSequence_var {
  public:
    inline StringSequence_var() : _pd_seq(0) {}
    inline StringSequence_var(StringSequence* _s) : _pd_seq(_s) {}
    inline StringSequence_var(const StringSequence_var& _s) {
      if( _s._pd_seq )  _pd_seq = new StringSequence(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~StringSequence_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline StringSequence_var& operator = (StringSequence* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline StringSequence_var& operator = (const StringSequence_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new StringSequence;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline StringSequence* operator -> () { return _pd_seq; }
    inline const StringSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator StringSequence& () const { return *_pd_seq; }
#else
    inline operator const StringSequence& () const { return *_pd_seq; }
    inline operator StringSequence& () { return *_pd_seq; }
#endif
      
    inline const StringSequence& in() const { return *_pd_seq; }
    inline StringSequence&       inout()    { return *_pd_seq; }
    inline StringSequence*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline StringSequence* _retn() { StringSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class StringSequence_out;
    
  private:
    StringSequence* _pd_seq;
  };

  class StringSequence_out {
  public:
    inline StringSequence_out(StringSequence*& _s) : _data(_s) { _data = 0; }
    inline StringSequence_out(StringSequence_var& _s)
      : _data(_s._pd_seq) { _s = (StringSequence*) 0; }
    inline StringSequence_out(const StringSequence_out& _s) : _data(_s._data) {}
    inline StringSequence_out& operator = (const StringSequence_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline StringSequence_out& operator = (StringSequence* _s) {
      _data = _s;
      return *this;
    }
    inline operator StringSequence*&()  { return _data; }
    inline StringSequence*& ptr()       { return _data; }
    inline StringSequence* operator->() { return _data; }

    inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    StringSequence*& _data;

  private:
    StringSequence_out();
    StringSequence_out& operator=(const StringSequence_var&);
  };


};

class _objref_ServerConfigHandler :
  public virtual ::CORBA::Object,
  public virtual omniObjRef
{
public:
  char* getServerName();
  void setServerName(const char* name);
  char* getServerAddr();
  ::CORBA::UShort getServerPort();
  void setServerPort(::CORBA::UShort port);
  ServerConfigHandler::INTERNET_PROTOCOL getInternetProtocol();
  void setInternetProtocol(::ServerConfigHandler::INTERNET_PROTOCOL ip);
  ::CORBA::UShort getIdleTimeout();
  void setIdleTimeout(::CORBA::UShort to);
  ::CORBA::UShort getDataConnectionTimeout();
  void setDataConnectionTimeout(::CORBA::UShort to);
  ::CORBA::Boolean isUsingSystemUser();
  void useSystemUser(::CORBA::Boolean use);
  ::CORBA::Boolean isAnonymousAllowed();
  void allowAnonymous(::CORBA::Boolean allow);
  ::CORBA::Boolean isAnonymousUploadAllowed();
  void allowAnonymousUpload(::CORBA::Boolean allow);
  ::CORBA::Boolean isAnonymousCreateDirAllowed();
  void allowAnonymousCreateDir(::CORBA::Boolean allow);
  ServerConfigHandler::VIRTUAL_USER_AUTHENTICATION getVirtualUserAuthentication();
  void setVirtualUserAuthentication(::ServerConfigHandler::VIRTUAL_USER_AUTHENTICATION mode);
  void addVirtualUser(const char* user, const char* password);
  void remVirtualUser(const char* user);
  ServerConfigHandler::StringSequence* virtualUsers();
  char* getWelcomeMessage();
  void setWelcomeMessage(const char* msg);
  char* getLogFile();
  void importConfiguration(const char* configuration);
  char* exportConfiguration();
  void resetConfiguration();
  void start();
  void stop();
  void restart();

  inline _objref_ServerConfigHandler()  { _PR_setobj(0); }  // nil
  _objref_ServerConfigHandler(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_ServerConfigHandler();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_ServerConfigHandler(const _objref_ServerConfigHandler&);
  _objref_ServerConfigHandler& operator = (const _objref_ServerConfigHandler&);
  // not implemented

  friend class ServerConfigHandler;
};

class _pof_ServerConfigHandler : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_ServerConfigHandler() : _OMNI_NS(proxyObjectFactory)(ServerConfigHandler::_PD_repoId) {}
  virtual ~_pof_ServerConfigHandler();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_ServerConfigHandler :
  public virtual omniServant
{
public:
  virtual ~_impl_ServerConfigHandler();

  virtual char* getServerName() = 0;
  virtual void setServerName(const char* name) = 0;
  virtual char* getServerAddr() = 0;
  virtual ::CORBA::UShort getServerPort() = 0;
  virtual void setServerPort(::CORBA::UShort port) = 0;
  virtual ServerConfigHandler::INTERNET_PROTOCOL getInternetProtocol() = 0;
  virtual void setInternetProtocol(::ServerConfigHandler::INTERNET_PROTOCOL ip) = 0;
  virtual ::CORBA::UShort getIdleTimeout() = 0;
  virtual void setIdleTimeout(::CORBA::UShort to) = 0;
  virtual ::CORBA::UShort getDataConnectionTimeout() = 0;
  virtual void setDataConnectionTimeout(::CORBA::UShort to) = 0;
  virtual ::CORBA::Boolean isUsingSystemUser() = 0;
  virtual void useSystemUser(::CORBA::Boolean use) = 0;
  virtual ::CORBA::Boolean isAnonymousAllowed() = 0;
  virtual void allowAnonymous(::CORBA::Boolean allow) = 0;
  virtual ::CORBA::Boolean isAnonymousUploadAllowed() = 0;
  virtual void allowAnonymousUpload(::CORBA::Boolean allow) = 0;
  virtual ::CORBA::Boolean isAnonymousCreateDirAllowed() = 0;
  virtual void allowAnonymousCreateDir(::CORBA::Boolean allow) = 0;
  virtual ServerConfigHandler::VIRTUAL_USER_AUTHENTICATION getVirtualUserAuthentication() = 0;
  virtual void setVirtualUserAuthentication(::ServerConfigHandler::VIRTUAL_USER_AUTHENTICATION mode) = 0;
  virtual void addVirtualUser(const char* user, const char* password) = 0;
  virtual void remVirtualUser(const char* user) = 0;
  virtual ServerConfigHandler::StringSequence* virtualUsers() = 0;
  virtual char* getWelcomeMessage() = 0;
  virtual void setWelcomeMessage(const char* msg) = 0;
  virtual char* getLogFile() = 0;
  virtual void importConfiguration(const char* configuration) = 0;
  virtual char* exportConfiguration() = 0;
  virtual void resetConfiguration() = 0;
  virtual void start() = 0;
  virtual void stop() = 0;
  virtual void restart() = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
  
};




class POA_ServerConfigHandler :
  public virtual _impl_ServerConfigHandler,
  public virtual ::PortableServer::ServantBase
{
public:
  virtual ~POA_ServerConfigHandler();

  inline ::ServerConfigHandler_ptr _this() {
    return (::ServerConfigHandler_ptr) _do_this(::ServerConfigHandler::_PD_repoId);
  }
};







#undef _core_attr
#undef _dyn_attr

inline void operator >>=(ServerConfigHandler::INTERNET_PROTOCOL _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (ServerConfigHandler::INTERNET_PROTOCOL& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= ServerConfigHandler::undefined) {
    _e = (ServerConfigHandler::INTERNET_PROTOCOL) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

inline void operator >>=(ServerConfigHandler::VIRTUAL_USER_AUTHENTICATION _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (ServerConfigHandler::VIRTUAL_USER_AUTHENTICATION& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= ServerConfigHandler::Anonymous) {
    _e = (ServerConfigHandler::VIRTUAL_USER_AUTHENTICATION) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}



inline void
ServerConfigHandler::_marshalObjRef(::ServerConfigHandler_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_ServerConfigHandler
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_ServerConfigHandler
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_ServerConfigHandler
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_ServerConfigHandler
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_ServerConfigHandler
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_ServerConfigHandler
#endif

#endif  // __ServerConfigHandler_hh__

